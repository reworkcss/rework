#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
  , rework = require('..')
  , stdin = process.stdin;

/**
 * Prefixed properties.
 */

var props = [
  'animation',
  'animation-delay',
  'animation-direction',
  'animation-duration',
  'animation-fill-mode',
  'animation-iteration-count',
  'animation-name',
  'animation-play-state',
  'animation-timing-function',
  'appearance',
  'background-visibility',
  'background-clip',
  'background-composite',
  'background-origin',
  'background-size',
  'blend-mode',
  'border-bottom-left-radius',
  'border-bottom-right-radius',
  'border-fit',
  'border-image',
  'border-radius',
  'border-top-left-radius',
  'border-top-right-radius',
  'border-vertical-spacing',
  'box-align',
  'box-direction',
  'box-flex',
  'box-flex-group',
  'box-lines',
  'box-ordinal-group',
  'box-orient',
  'box-pack',
  'box-reflect',
  'box-shadow',
  'box-sizing',
  'clip-path',
  'column-count',
  'column-width',
  'column-min-width',
  'column-width-policy',
  'column-gap',
  'column-rule',
  'column-rule-color',
  'column-rule-style',
  'column-rule-width',
  'column-span',
  'flex',
  'flex-basis',
  'flex-direction',
  'flex-flow',
  'flex-grow',
  'flex-shrink',
  'flex-wrap',
  'flex-flow-from',
  'flex-flow-into',
  'font-smoothing',
  'transform',
  'transform-origin',
  'transform-origin-x',
  'transform-origin-y',
  'transform-origin-z',
  'transform-style',
  'transition',
  'transition-delay',
  'transition-duration',
  'transition-property',
  'transition-timing-function',
  'user-drag',
  'user-modify',
  'user-select',
  'wrap',
  'wrap-flow',
  'wrap-margin',
  'wrap-padding',
  'wrap-through'
];

// options

program
  .version(require('../package.json').version)
  .option('-v, --vendors <list>', 'specify list of vendors', list)
  .option('-e, --ease', 'add additional easing functions')
  .option('--vars', 'add css variable support')
  .parse(process.argv);

// --vendors

var vendors = prefix(program.vendors || ['o', 'ms', 'moz', 'webkit']);

// stdin boilerplate...

var str = '';
stdin.setEncoding('utf8');
stdin.on('data', function(chunk){ str += chunk });
stdin.on('end', done);
stdin.resume();

// parse list

function list(str) {
  return str.split(/ *, */);
}

// prefix names

function prefix(names) {
  return names.map(function(name){
    return '-' + name + '-';
  });
}

// rework

function done() {
  var style = rework(str);
  style.vendors(vendors);
  style.use(rework.keyframes());

  if (program.ease) {
    style.use(rework.ease());
  }

  style.use(rework.prefixValue('linear-gradient'))
  style.use(rework.prefixValue('radial-gradient'))
  style.use(rework.prefixValue('transform'))
  style.use(rework.prefix(props))
  style.use(rework.at2x())

  if (program.vars) {
    style.use(rework.vars());
  }

  if (~vendors.indexOf('-ms-')) {
    style.use(rework.opacity());
  }

  process.stdout.write(style.toString());
}
